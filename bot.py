import logging
import json
import os
import ssl
import socket
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from urllib.parse import urlparse
import base64
import requests
from Levenshtein import distance as levenshtein_distance
import re

WHOISXML_API_KEY = "–í–ê–®_–¢–û–ö–ï–ù"
VIRUSTOTAL_API_KEY = "–í–ê–®_–¢–û–ö–ï–ù"
TELEGRAM_BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
PHISHING_DB_FILE = os.path.join(os.getcwd(), "phishing_database.json")
CACHE_FILE = os.path.join(os.getcwd(), "cache.json")
TRUSTED_SITE_LIST = os.path.join(os.getcwd(), "sitelist.json")
sitelist = []
phishing_db = []


def load_data():
    global sitelist, phishing_db
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
    if os.path.exists(TRUSTED_SITE_LIST):
        with open(TRUSTED_SITE_LIST, "r", encoding="utf-8") as f:
            sitelist = json.load(f)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–π –±–∞–∑—ã
    if os.path.exists(PHISHING_DB_FILE):
        with open(PHISHING_DB_FILE, "r", encoding="utf-8") as f:
            phishing_db = json.load(f)

def save_data():
    with open(PHISHING_DB_FILE, "w", encoding="utf-8") as f:
        json.dump(phishing_db, f, indent=2)


def load_cache():
    if os.path.exists(CACHE_FILE):
        with open(CACHE_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    return {}

def save_cache(cache):
    os.makedirs(os.path.dirname(CACHE_FILE), exist_ok=True)
    with open(CACHE_FILE, "w", encoding="utf-8") as file:
        json.dump(cache, file, ensure_ascii=False, indent=4)
    logger.info(f"–ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {CACHE_FILE}")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
def check_ssl_certificate(domain):
    try:
        context = ssl.create_default_context()
        with socket.create_connection((domain, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=domain) as ssock:
                cert = ssock.getpeercert()

        expire_date = datetime.strptime(cert['notAfter'], "%b %d %H:%M:%S %Y %Z")
        remaining_days = (expire_date - datetime.now()).days

        if remaining_days < 0:
            return "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω", "–≤—ã—Å–æ–∫–∏–π"
        elif remaining_days < 7:
            return "–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {} –¥–Ω–µ–π".format(remaining_days), "—Å—Ä–µ–¥–Ω–∏–π"
        return "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", "–Ω–∏–∑–∫–∏–π"

    except Exception as e:
        logger.error(f"SSL check error: {str(e)}")
        return "–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", "–Ω–∏–∑–∫–∏–π"


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–π –±–∞–∑–µ
def check_phishing_db(domain):
    return domain in phishing_db

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Å—ã–ª–∫–∞ –ª–∏ —ç—Ç–æ
def is_url(text):
    try:
        result = urlparse(text)
        return all([result.scheme in ["http", "https"], result.netloc])
    except:
        return False

# –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
def is_domain_sus(domain, sitelist, threshold):
    for legit_domain in sitelist:
        if domain == legit_domain:
            return False
    for legit_domain in sitelist:
        if levenshtein_distance(domain, legit_domain) <= threshold:
            return True
    return False

def check_virustotal(url):
    try:
        headers = {"x-apikey": VIRUSTOTAL_API_KEY}
        url_id = base64.urlsafe_b64encode(url.encode()).decode().strip("=")
        response = requests.get(f"https://www.virustotal.com/api/v3/urls/{url_id}", headers=headers)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code == 200:
            data = response.json()
            if 'data' in data and 'attributes' in data['data']:
                malicious_count = data['data']['attributes']['last_analysis_stats']['malicious']
                return malicious_count > 1
            else:
                logger.warning(f"VirusTotal: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {url}")
                return False
        else:
            logger.warning(f"VirusTotal: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {url}. –ö–æ–¥: {response.status_code}")
            return False

    except Exception as e:
        logger.error(f"VirusTotal: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {url}: {str(e)}")
        return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞
def get_domain_creation_date(domain):
    url = f"https://www.whoisxmlapi.com/whoisserver/WhoisService?apiKey={WHOISXML_API_KEY}&domainName={domain}&outputFormat=JSON"
    try:
        response = requests.get(url)
        data = response.json()
        creation_date = data.get("WhoisRecord", {}).get("createdDate", None)
        if creation_date:
            return datetime.strptime(creation_date, "%Y-%m-%dT%H:%M:%SZ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ WHOIS: {e}")
    return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
def contains_cyrillic(text):
    return bool(re.search('[–∞-—è–ê-–Ø]', text))

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
def check_phishing(url):
    if url in cache:
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {url} –≤–∑—è—Ç –∏–∑ –∫–µ—à–∞")
        return cache[url]

    report = []
    parsed_url = urlparse(url)
    domain = parsed_url.netloc

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–π –±–∞–∑–µ
        if check_phishing_db(domain):
            report.append({"issue": "–ù–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö —Å–∞–π—Ç–æ–≤", "risk": "–≤—ã—Å–æ–∫–∏–π"})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ WHOIS
        creation_date = get_domain_creation_date(domain)
        if creation_date:
            age_days = (datetime.now() - creation_date).days
            if age_days < 30:
                report.append({"issue": f"–ú–æ–ª–æ–¥–æ–π –¥–æ–º–µ–Ω ({age_days} –¥–Ω–µ–π)", "risk": "—Å—Ä–µ–¥–Ω–∏–π"})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL
        cert_status, cert_risk = check_ssl_certificate(domain)
        report.append({"issue": f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {cert_status}", "risk": cert_risk})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        if contains_cyrillic(domain):
            report.append({"issue": "–ö–∏—Ä–∏–ª–ª–∏—Ü–∞ –≤ –¥–æ–º–µ–Ω–µ", "risk": "–≤—ã—Å–æ–∫–∏–π"})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS
        if not url.startswith("https"):
            report.append({"issue": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç HTTPS", "risk": "—Å—Ä–µ–¥–Ω–∏–π"})

        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if any(c in domain for c in ['-', '_', '0']):
            report.append({"issue": "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", "risk": "—Å—Ä–µ–¥–Ω–∏–π"})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ VirusTotal
        if check_virustotal(url):
            report.append({"issue": "–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤ VirusTotal", "risk": "–≤—ã—Å–æ–∫–∏–π"})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ —Å–∞–π—Ç–∞–º–∏
        if is_domain_sus(domain, sitelist, 2):
            report.append({"issue": "–ö–æ–ø–∏—Ä—É–µ—Ç —Å–∞–π—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö", "risk": "–≤—ã—Å–æ–∫–∏–π"})

    except Exception as e:
        logger.error(f"Check error: {str(e)}")
        report.append({"issue": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ (–≤–æ–∑–º–æ–∂–Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞)", "risk": "–Ω–∏–∑–∫–∏–π"})

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
    risk_counts = {"–≤—ã—Å–æ–∫–∏–π": 0, "—Å—Ä–µ–¥–Ω–∏–π": 0, "–Ω–∏–∑–∫–∏–π": 0}
    for item in report:
        risk_counts[item["risk"]] += 1

    if risk_counts["–≤—ã—Å–æ–∫–∏–π"] > 0 or risk_counts["—Å—Ä–µ–¥–Ω–∏–π"] >= 2:
        overall_risk = "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
    elif risk_counts["—Å—Ä–µ–¥–Ω–∏–π"] > 0:
        overall_risk = "üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
    else:
        overall_risk = "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"

    result = {
        "overall_risk": overall_risk,
        "report": report
    }

    cache[url] = result
    save_cache(cache)
    return result


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
def format_report(result):
    report_text = "\n".join([
        result['overall_risk'],
        "–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:",
        *[f"- {item['issue']} ({item['risk'].capitalize()})" for item in result['report']]
    ])
    return report_text


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def check_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if is_url(text):
        result = check_phishing(text)
        await update.message.reply_text(format_report(result))
    else:
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ URL")

async def start(update: Update, context):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL –Ω–∞ —Ñ–∏—à–∏–Ω–≥. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ—ë. (–°—Å—ã–ª–∫—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–æ–ª–Ω–æ–º —Ñ–æ—Ä–º–∞–º—Ç–µ, –≤–∫–ª—é—á–∞—è –ø—Ä–æ—Ç–æ–∫–æ–ª)"
    )

def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_url))

    application.run_polling()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_data()
cache = load_cache()

if __name__ == "__main__":
    main()
